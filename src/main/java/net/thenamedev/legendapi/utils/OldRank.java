package net.thenamedev.legendapi.utils;import org.bukkit.ChatColor;import org.bukkit.command.CommandSender;import org.bukkit.command.ConsoleCommandSender;import org.bukkit.entity.Player;/** * This is the OLD rank system. This should not be used anymore; this is only here for legacy purposes.<br><br> * * Core rank file. Essentially manages all plugin user permissions in a nutshell. */@Deprecatedpublic enum OldRank {    /**     * Owner staff rank     */    Owner,    /**     * Developer staff rank     */    Dev,    /**     * GM (Game Master) rank     */    GM,    /**     * Senior moderator staff rank (aka a mod who has been staff for ~6 months)     *     * Not yet used fully.     */    SrMod,    /**     * Moderator staff rank     */    Mod,    /**     * Helper "staff" rank     */    Helper,    /**     * Rank for YouTubers and Twitch Livestreamers (and trusted people too, but not as often)     */    VIP,    /**     * Special Member+ rank for users who have donated. This should only have cosmetic additions.     */    MemberPlus,    /**     * I have no idea why I ever added this. I was probably drunk at the time of making the system initially. -Pixel<br><br>     *     * Rank for Member users     */    Member;    /**     * Returns a player's colored name     * @param p Player in question     * @return The formatted name     */    public static String getFormattedName(Player p) {        if(getRank(p) == Owner) return ChatColor.RED + "" + ChatColor.BOLD + p.getName();        else if(getRank(p) == Dev) return ChatColor.DARK_PURPLE + p.getName();        else if(getRank(p) == GM) return ChatColor.DARK_RED + p.getName();        else if(getRank(p) == SrMod) return ChatColor.RED + p.getName();        else if(getRank(p) == Mod) return ChatColor.GOLD + p.getName();        else if(getRank(p) == Helper) return ChatColor.BLUE + p.getName();        else if(getRank(p) == VIP) return ChatColor.DARK_GREEN + p.getName();        else return ChatColor.YELLOW + p.getName();    }    /**     * Get a player's rank.     * @param sender The player in question     * @return The player's rank     */    public static OldRank getRank(CommandSender sender) {        if(sender instanceof ConsoleCommandSender) return Owner; //gives console all rights basically [not that it would matter anyways]        else if(sender.getName().equalsIgnoreCase("JadenJFilms")) return Owner; // OWNER rank        else if(sender.getName().equalsIgnoreCase("ThePixelDev")) return Dev; // DEV rank        else if(sender.hasPermission("legendarena.rank.gm")) return GM; // MODERATOR rank        else if(sender.hasPermission("legendarena.rank.srmod"))return SrMod; // SENIOR MODERATOR rank        else if(sender.hasPermission("legendarena.rank.mod")) return Mod; // MODERATOR rank        else if(sender.hasPermission("legendarena.rank.helper")) return Helper; // HELPER rank        else if(sender.hasPermission("legendarena.rank.vip")) return VIP; // VIP rank        else return Member; // MEMBER rank    }    /**     * Check if a player is a specified rank.     * @param sender The player in question.     * @param rank   The rank to check for     * @return True if the player has the correct rank, or false if not.     */    @SuppressWarnings("RedundantIfStatement")    public static boolean getRank(CommandSender sender, OldRank rank) {        if(sender instanceof ConsoleCommandSender) return true;        else if(sender.getName().equalsIgnoreCase("JadenJFilms") && rank == Owner) return true;        else if(sender.getName().equalsIgnoreCase("ThePixelDev") && rank == Dev) return true;        else if(sender.hasPermission("legendarena.rank.gm") && rank == GM) return true;        else if(sender.hasPermission("legendarena.rank.srmod") && rank == SrMod) return true;        else if(sender.hasPermission("legendarena.rank.mod") && rank == Mod) return true;        else if(sender.hasPermission("legendarena.rank.helper") && rank == Helper) return true;        else if(sender.hasPermission("legendarena.rank.vip") && rank == VIP) return true;        else if(sender.hasPermission("legendarena.rank.memberplus") && rank == MemberPlus) return true;        else return false;    }    /**     * Gets the rank prefix (i.e. colored rank) for a rank.     * @param r The rank to get the prefix for     * @return The prefix     */    public static String getRankPrefix(OldRank r) {        if(r == Owner) return ChatColor.RED + "" + ChatColor.BOLD + "Owner";        else if(r == Dev) return ChatColor.DARK_PURPLE + "Dev";        else if(r == GM) return ChatColor.GREEN + "GM";        else if(r == SrMod) return ChatColor.GREEN + "SrMod";        else if(r == Mod) return ChatColor.GREEN + "Mod";        else if(r == Helper) return ChatColor.GREEN + "Helper";        else if(r == VIP) return ChatColor.GOLD + "VIP";        else if(r == MemberPlus) return ChatColor.BLUE + "Member+";        else return ChatColor.GRAY + "Member";    }    /**     * Returns a rank from a string.     * @param from The string to parse.     * @return The rank parsed     */    public static OldRank fromString(String from) {        if(from.equalsIgnoreCase("owner")) return Owner;        else if(from.equalsIgnoreCase("dev")) return Dev;        else if(from.equalsIgnoreCase("gm")) return GM;        else if(from.equalsIgnoreCase("moderator")) return Mod;        else if(from.equalsIgnoreCase("helper")) return Helper;        else if(from.equalsIgnoreCase("vip")) return VIP;        else if(from.equalsIgnoreCase("member+")) return MemberPlus;        else if(from.equalsIgnoreCase("member")) return Member;        else return null;    }    /**     * Sends a player a no permission message.     *     * Deprecated - use noPermissions(Rank) instead.     *     * @param sender The player in question     * @param rank   The rank needed for a command     */    @Deprecated    public static void noPermissions(CommandSender sender, OldRank rank) {        sender.sendMessage(noPermissions(rank));    }    /**     * Returns a "Not enough permissions"-type message.     * @param r The rank to target     * @return The message (you should send the player in question this, btw)     */    public static String noPermissions(OldRank r) {        switch(r) {            case Owner:                return ChatColor.RED + "Minimum rank required to use this " + PluginUtils.chars[1] + " " + ChatColor.RED + PluginUtils.chars[6] + "" + ChatColor.BOLD + " OWNER";            case Dev:                return ChatColor.RED + "Minimum rank required to use this " + PluginUtils.chars[1] + " " + ChatColor.DARK_PURPLE + PluginUtils.chars[6] + " DEVELOPER";            case GM:               return ChatColor.RED + "Minimum rank required to use this " + PluginUtils.chars[1] + " " + ChatColor.RED + PluginUtils.chars[6] + " GM";            case Mod:                return ChatColor.RED + "Minimum rank required to use this " + PluginUtils.chars[1] + " " + ChatColor.RED + PluginUtils.chars[6] + " MODERATOR";            case SrMod:                return ChatColor.RED + "Minimum rank required to use this " + PluginUtils.chars[1] + " " + ChatColor.RED + PluginUtils.chars[6] + " SRMODERATOR";            case Helper:                return ChatColor.RED + "Minimum rank required to use this " + PluginUtils.chars[1] + " " + ChatColor.RED + PluginUtils.chars[6] + " HELPER";            case VIP:                return ChatColor.RED + "Minimum rank required to use this " + PluginUtils.chars[1] + " " + ChatColor.GOLD + PluginUtils.chars[16] + " VIP";            case MemberPlus:                return ChatColor.RED + "Minimum rank required to use this " + PluginUtils.chars[1] + " " + ChatColor.DARK_GREEN + PluginUtils.chars[16] + " MEMBER+";            default:                return PluginUtils.msgError + "Unknown rank \"" + r + "\" in noPermissions() function - report this to Pixel please!";        }    }}