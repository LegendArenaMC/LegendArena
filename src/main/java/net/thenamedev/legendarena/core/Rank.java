package net.thenamedev.legendarena.core;import net.thenamedev.legendarena.utils.*;import org.bukkit.*;import org.bukkit.command.*;import org.bukkit.entity.*;/** * Core rank file. Essentially manages all plugin user permissions in a nutshell. */public enum Rank {    /**     * Owner staff rank     */    Owner,    /**     * Developer staff rank     */    Dev,    /**     * Administrator staff rank     */    Admin,    /**     * Senior moderator staff rank (aka a mod who has been staff for ~6 months)     *     * Not yet used.     */    SrMod,    /**     * Moderator staff rank     */    Mod,    /**     * Helper "staff" rank     */    Helper,    /**     * Rank for YouTubers and Twitch Livestreamers     */    VIP,    /**     * Rank for Member users     */    Member;    /**     * Returns a player's colored name     * @param p Player in question     * @return The formatted name     */    public static String getFormattedName(Player p) {        if(getRank(p) == Owner) return ChatColor.DARK_RED + "" /*added so IntelliJ doesn't complain*/ + ChatColor.BOLD + p.getName();        else if(getRank(p) == Dev) return ChatColor.DARK_PURPLE + p.getName();        else if(getRank(p) == Admin) return ChatColor.RED + p.getName();        else if(getRank(p) == SrMod) return ChatColor.RED + p.getName();        else if(getRank(p) == Mod) return ChatColor.DARK_GREEN + p.getName();        else if(getRank(p) == Helper) return ChatColor.BLUE + p.getName();        else if(getRank(p) == VIP) return ChatColor.GOLD + p.getName();        else if(getRank(p) == Member) return ChatColor.YELLOW + p.getName();        else return ChatColor.YELLOW + p.getName();    }    /**     * Returns a player's colored display name     * @param p Player in question     * @return The formatted name     * This function is deprecated. Use getFormattedName() instead.     */    @Deprecated    public static String getFormattedDisplayName(Player p) {        if(getRank(p) == Owner) return ChatColor.DARK_RED + "" + ChatColor.BOLD + p.getDisplayName();        else if(getRank(p) == Dev) return ChatColor.DARK_PURPLE + p.getDisplayName();        else if(getRank(p) == Admin) return ChatColor.RED + p.getDisplayName();        else if(getRank(p) == SrMod) return ChatColor.RED + p.getDisplayName();        else if(getRank(p) == Mod) return ChatColor.DARK_GREEN + p.getDisplayName();        else if(getRank(p) == Helper) return ChatColor.BLUE + p.getDisplayName();        else if(getRank(p) == VIP) return ChatColor.GOLD + p.getDisplayName();        else if(getRank(p) == Member) return ChatColor.YELLOW + p.getDisplayName();        else return ChatColor.YELLOW + p.getDisplayName();    }    /**     * Get a player's rank.     * @param sender The player in question     * @return The player's rank     */    public static Rank getRank(CommandSender sender) {        if(sender.getName().equalsIgnoreCase("JadenJFilms")) return Owner; // OWNER rank        else if(sender.getName().equalsIgnoreCase("ThePixelDev")) return Dev; // DEV rank        else if(sender.hasPermission("legendarena.rank.admin") || sender.isOp()) return Admin; // ADMIN rank        else if(sender.hasPermission("legendarena.rank.srmod"))return SrMod; // SENIOR MODERATOR rank        else if(sender.hasPermission("legendarena.rank.mod")) return Mod; // MODERATOR rank        else if(sender.hasPermission("legendarena.rank.helper")) return Helper; // HELPER rank        else if(sender.hasPermission("legendarena.rank.vip")) return VIP; // VIP rank        else if(sender.hasPermission("legendarena.rank.member")) return Member; // MEMBER rank        else return Member; // MEMBER rank (just to get the errors to shut up)    }    /**     * Check if a player is a specified rank.     * @param sender The player in question.     * @param rank   The rank to check for     * @return True if the player has the correct rank, or false if not.     */    public static boolean getRank(CommandSender sender, Rank rank) {        if(sender.getName().equalsIgnoreCase("JadenJFilms") && rank == Owner) return true;        else if(sender.getName().equalsIgnoreCase("ThePixelDev") && rank == Dev) return true;        else if(sender.hasPermission("legendarena.rank.admin") && rank == Admin) return true;        else if(sender.hasPermission("legendarena.rank.srmod") && rank == SrMod) return true;        else if(sender.hasPermission("legendarena.rank.mod") && rank == Mod) return true;        else if(sender.hasPermission("legendarena.rank.helper") && rank == Helper) return true;        else if(sender.hasPermission("legendarena.rank.vip") && rank == VIP) return true;        else if(sender.hasPermission("legendarena.rank.member") && rank == Member) return true;        else return false;    }    /**     * Gets the rank prefix (i.e. colored rank) for a rank.     * @param r The rank to get the prefix for     * @return The prefix     */    public static String getRankPrefix(Rank r) {        if(r == Owner) return ChatColor.DARK_RED + "Owner";        else if(r == Dev) return ChatColor.LIGHT_PURPLE + "Dev";        else if(r == Admin) return ChatColor.RED + "Admin";        else if(r == Admin) return ChatColor.RED + "SrMod";        else if(r == Mod) return ChatColor.BLUE + "Mod";        else if(r == Helper) return ChatColor.GREEN + "Helper";        else if(r == VIP) return ChatColor.DARK_GREEN + "VIP";        else if(r == Member) return ChatColor.GRAY + "Member";        else return ChatColor.GRAY + "Member"; //Added so the plugin compiles    }    /**     * Returns a rank from a string.     * @param from The string to parse.     * @return The rank parsed     */    public static Rank fromString(String from) {        if(from.equalsIgnoreCase("owner")) return Owner;        else if(from.equalsIgnoreCase("dev")) return Dev;        else if(from.equalsIgnoreCase("admin") || from.equalsIgnoreCase("administrator")) return Admin;        else if(from.equalsIgnoreCase("moderator")) return Mod;        else if(from.equalsIgnoreCase("helper")) return Helper;        else if(from.equalsIgnoreCase("vip")) return VIP;        else if(from.equalsIgnoreCase("member")) return Member;        else return null;    }    /**     * Sends a player a no permission message.     * @param sender The player in question     * @param rank   The rank needed for a command     */    public static void noPermissions(CommandSender sender, Rank rank) {        if(rank == Owner)            sender.sendMessage(ChatColor.RED + "Minimum rank required to run this command " + PluginUtils.chars[1] + ChatColor.DARK_BLUE + "" + ChatColor.BOLD + " OWNER");        else if(rank == Dev)            sender.sendMessage(ChatColor.RED + "Minimum rank required to run this command " + PluginUtils.chars[1] + ChatColor.LIGHT_PURPLE + " DEVELOPER");        else if(rank == Admin)            sender.sendMessage(ChatColor.RED + "Minimum rank required to run this command " + PluginUtils.chars[1] + ChatColor.RED + " ADMINISTRATOR");        else if(rank == SrMod)            sender.sendMessage(ChatColor.RED + "Minimum rank required to run this command " + PluginUtils.chars[1] + ChatColor.DARK_GREEN + " SRMODERATOR");        else if(rank == Mod)            sender.sendMessage(ChatColor.RED + "Minimum rank required to run this command " + PluginUtils.chars[1] + ChatColor.DARK_GREEN + " MODERATOR");        else if(rank == Helper)            sender.sendMessage(ChatColor.RED + "Minimum rank required to run this command " + PluginUtils.chars[1] + ChatColor.BLUE + " HELPER");        else if(rank == VIP)            sender.sendMessage(ChatColor.RED + "Minimum rank required to run this command " + PluginUtils.chars[1] + ChatColor.GOLD + " VIP");    }}