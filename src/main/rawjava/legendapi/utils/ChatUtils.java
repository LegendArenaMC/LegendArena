/* * This plugin is copyright Legend Arena, 2014-current. See LICENSE.md for full license file. */package legendapi.utils;import legendapi.exceptions.AreYouDrunkException;import legendapi.message.Message;import org.bukkit.ChatColor;/** * Various random chat utilities. * * @author ThePixelDev */public class ChatUtils {    private static final ChatColor[] chatColors = {            ChatColor.GREEN,            ChatColor.AQUA,            ChatColor.RED,            ChatColor.BLUE,            ChatColor.DARK_AQUA,            ChatColor.YELLOW,            ChatColor.LIGHT_PURPLE,            ChatColor.DARK_PURPLE,            ChatColor.GOLD    };    public static final char[] specialCharacters = {            '♫',            '»',            '♦',            '•',            '■',            '™',            '↔',            '‼',            '♥',            '↨',            '►',            '→',            '‼'    };    @Deprecated    /**     * Use ChatUtils.specialCharacters instead.     */    public static final char[] chars = specialCharacters;    public static String randomRainbow(String from) {        StringBuilder builder = new StringBuilder();        char[] charList = from.toCharArray();        int colorCount = 0;        for(char c : charList) {            builder.append(chatColors[colorCount]).append(c);            if(colorCount + 1 >= chatColors.length)                colorCount = 0;            else                colorCount++;        }        return builder.toString();    }    @Deprecated    public static String getFormattedHelpMsg(String cmd, String desc) {        return getFormattedMsg(cmd, desc);    }    public static String getFormattedMsg(String msg, String desc) {        return ChatColor.GREEN + msg + ChatColor.DARK_GRAY + " " + specialCharacters[1] + " " + ChatColor.BLUE + desc;    }    public static String getFormattedHeader(String header) {        return ChatColor.BLUE + "=-= " + ChatColor.LIGHT_PURPLE + header + ChatColor.BLUE + " =-=";    }    public static void clearChat(String clearer) {        if(clearer == null || clearer.equals(""))            throw new NullPointerException();        String clearMsg = "";        for(int i = 0; i < 120; i++)            clearMsg += "\n "; //for loop is so I don't have to trudge through 120 lines of just spaces every time I want to go in here        new Message().append(clearMsg).broadcast();        new Message().append(getCustomMsg("Chat Management") + "Chat has been cleared by " + ChatColor.RED + clearer + ChatColor.BLUE + ".").broadcast();    }    /**     * Format a cast normally.     * @param args The arguments String[]     * @return The formatted cast     */    public static String formatCast(String[] args) {        if(args == null || args.length == 0 || (args.length == 1 && args[0].equals("")))            throw new NullPointerException("Arguments list cannot be null, empty, or containing only one empty string.");        StringBuilder builder = new StringBuilder();        int runs = 0;        for(String s : args) {            if(s.equals("")) continue;            builder.append(runs > 0 ? " " : "").append(s);            runs++;        }        return builder.toString();    }    /**     * Format a cast, while ignoring certain args[] IDs.     * @param args The arguments String[]     * @param ignoreList The list of IDs to not care about     * @return The formatted cast, without the ignored IDs     */    public static String formatCast(String[] args, int... ignoreList) {        if(ignoreList.length == args.length)            throw new AreYouDrunkException("You can't ignore everything in a cast!");        for(int i : ignoreList) {            if(i < 0 || i > args.length)                throw new AreYouDrunkException("Removal ID is -1 or lower, or more than args.length");            args[i] = "";        }        return formatCast(args);    }    /**     * Get a custom formatted chat prefix.     * @param prefix The prefix to add     * @return The formatted prefix     */    public static String getCustomMsg(String prefix) {        return ChatColor.GREEN + prefix + " " + ChatColor.DARK_GRAY + specialCharacters[1] + " " + ChatColor.BLUE;    }    /**     * Pre-built message prefixes.     */    @Deprecated    public static class Messages {        public static final String errorMsg = getCustomMsg(ChatColor.RED + "Error");    }}